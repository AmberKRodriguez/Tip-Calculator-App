package com.example.tipcalculatorapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.annotation.DrawableRes
import androidx.annotation.StringRes
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.tipcalculatorapp.ui.theme.TipCalculatorAppTheme
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import java.text.NumberFormat
import androidx.compose.material3.Icon
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.safeDrawingPadding
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Switch
import androidx.compose.material3.TextField
import androidx.compose.ui.Alignment
import kotlin.Boolean


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TipCalculatorAppTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                ){
                   TipCalculatorLayout()
                }
            }
        }
    }
}

@Composable
fun  TipCalculatorLayout() {
    var amountInput by remember { mutableStateOf("") }
    var tipInput by remember { mutableStateOf("") }
    var partyNumber by remember { mutableStateOf("") }
    var splitTip by remember { mutableStateOf(false) }
    val amount = amountInput.toDoubleOrNull() ?: 0.0
    val tipPercent = tipInput.toDoubleOrNull() ?: 0.0
    val party = partyNumber.toIntOrNull() ?: 0
    val totalPerGuest = calculateAmountPerGuest(amount, tipPercent, party, splitTip)
    val total = calculateTotal(amount, tipPercent)
    val tip = calculateTip(amount, tipPercent)


    Column(
        modifier = Modifier
            .statusBarsPadding()
            .padding(40.dp)
            .verticalScroll(rememberScrollState())
            .safeDrawingPadding(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        // Title text - calculate tip
        Text(
            text = stringResource(R.string.calculate_tip),
            modifier = Modifier
                .padding(bottom = 16.dp, top = 40.dp)
                .align(alignment = Alignment.Start)
        )

        //Bill amount entry space
        EditNumberField(
            label = R.string.bill_amount,
            leadingIcon = R.drawable.money,
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number,
                imeAction = ImeAction.Next
            ),
            value = amountInput,
            onValueChange = {amountInput = it},
            modifier = Modifier.padding(bottom = 32.dp).fillMaxWidth()
        )
        //tip amount entry space
        EditNumberField(
            label = R.string.how_was_the_service,
            leadingIcon = R.drawable.percent,
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number,
                imeAction = ImeAction.Next
            ),
            value = tipInput,
            onValueChange = {tipInput = it},
            modifier = Modifier.padding(bottom = 32.dp).fillMaxWidth()
        )
        //Number of guest entry space
        EditNumberField(
            label = R.string.number_of_guest,
            leadingIcon = R.drawable.money,
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number,
                imeAction = ImeAction.Done
            ),
            value = partyNumber,
            onValueChange = {partyNumber = it},
            modifier = Modifier.padding(bottom = 32.dp).fillMaxWidth()
        )

        //Split bill indicator
        SplitTheTipRow(
            splitTip = splitTip,
            onSplitChanged = {splitTip = it},
            modifier = Modifier.padding(bottom = 32.dp)
        )
        //Total amount
        Text(
            text = stringResource(R.string.total,total),
            style = MaterialTheme.typography.displaySmall
        )
        //Tip amount
        Text(
            text = stringResource(R.string.tip,tip),
            style = MaterialTheme.typography.displaySmall
        )

        Spacer(modifier = Modifier.height(150.dp))
        //Amount per quest
        Text(
            text = stringResource(R.string.amount_per_guest,totalPerGuest),
            style = MaterialTheme.typography.displaySmall
        )


    }
}
//calculations to get total amount
private fun calculateTotal(
    amount: Double,
    tipPercent: Double,
): String {
    var total = amount + (tipPercent / 100 * amount)
    return NumberFormat.getCurrencyInstance().format(total)
}
//calculations to get tip amount
private fun calculateTip(
    amount: Double,
    tipPercent: Double,
): String {
    var tip = tipPercent / 100 * amount
    return NumberFormat.getCurrencyInstance().format(tip)
}

//calculations to get amount per guest
private fun calculateAmountPerGuest(
    amount: Double,
    tipPercent: Double,
    party: Int,
    splitTip: Boolean

): String {
    var totalPerGuest = amount + (tipPercent / 100 * amount)
    if (splitTip) {
        totalPerGuest = (amount + (tipPercent / 100 * amount)) / party
    }
    return NumberFormat.getCurrencyInstance().format(totalPerGuest)
}



@Preview(showBackground = true)
@Composable
fun TipCalculatorPreview() {
    TipCalculatorAppTheme {
        TipCalculatorLayout()
    }
}
//add an EditNumberField() composable function, that takes a Modifier parameter.
@Composable
fun EditNumberField(
    @StringRes label: Int,
    @DrawableRes leadingIcon: Int,
    keyboardOptions: KeyboardOptions,
    value: String,
    onValueChange:(String) -> Unit,
    modifier: Modifier = Modifier
) {
// textfield paramaters
    TextField(
        value = value,
        leadingIcon = {Icon(painter = painterResource(id=leadingIcon), null)},
        onValueChange = onValueChange,
        singleLine = true,
        label = { Text(stringResource(label)) },
        keyboardOptions = keyboardOptions,
        modifier = modifier

    )

}

//split tip row - includes text and switch icon
@Composable
fun SplitTheTipRow(
    splitTip: Boolean,
    onSplitChanged: (Boolean) -> Unit,
    modifier: Modifier = Modifier){
    Row (
        modifier = modifier
            .fillMaxWidth()
            .size(48.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {

        Text(text= stringResource(R.string.split_bill))
        Switch(
            modifier = modifier
                .fillMaxWidth()
                .wrapContentWidth(Alignment.End),
            checked = splitTip,
            onCheckedChange = onSplitChanged,
        )
    }
}
